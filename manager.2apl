goals:
wants(pc(1, 'dsaf', 'Intel Desktop Board D865PERL', 'Intel Pentium 4', 'ATI RADEON 7000 Graphics card')).

beliefs:
  id(0).
  numberOfContractors(3).

beliefupdates:
{ id(X) }   Increment()    { not id(X), id(X+1)}
{ not bid(Id, Cont, _), bidsReceived(Id, X) }    AddBid(Id, Cont, Price) {bid(Id, Cont, Price), not bidsReceived(Id, X), bidsReceived(Id, X+1)}
  
pcrules:
    message( AGENT , inform, La, On, bid(ID, PRICE)) <- true |
    {   
        AddBid(ID, AGENT, PRICE);
        if(PRICE > 0)
        {
            if (lowestBid(ID, bid(LCN, LPR)))
            {
                if(LPR > PRICE)
                {
                    -lowestBid(ID,bid(LCN,LPR));
                    +lowestBid(ID,bid(AGENT, PRICE));
                }
            }
            else
            {
                +lowestBid(ID, bid(AGENT, PRICE));
            }
        }
    }
    message( AGENT, inform, La, On, done(id, success, pc)) <- true |
    {
        dropgoal(wants(pc));
    }
    agree(ID) <- true |
    {
        if (B(lowestBid(ID, bid(LCN, LPR))))
        {
            if(LCN = 'contractor1')
            {
                send(contractor1, inform, winner(ID, 1));
                send(contractor2, inform, winner(ID, 0));
                send(contractor3, inform, winner(ID, 0));
            }
            if(LCN = 'contractor2')
            {
                send(contractor1, inform, winner(ID, 0));
                send(contractor2, inform, winner(ID, 1));
                send(contractor3, inform, winner(ID, 0));
            }
            if(LCN = 'contractor3')
            {
                send(contractor1, inform, winner(ID, 0));
                send(contractor2, inform, winner(ID, 0));
                send(contractor3, inform, winner(ID, 1));
            }
        }
    }
    
pgrules:
    wants(PC) <- not contractSend(X, PC) |
    {
        if B(id(X)) then
        {
            +bidsReceived(X, 0);
            send(contractor2, inform, wanted(X, PC));
            send(contractor3, inform, wanted(X, PC));
            send(contractor1, inform, wanted(X, PC));
            +contractSend(X, PC);
            Increment();
        }
    }
    wants(PC) <- contractSend(X, PC) and bidsReceived(X, N) and numberOfContractors(N) |
    {
        agree(X);
        dropgoal(wants(PC));
    }
    
prrules:
    AddBid(_,_,_); REST; <- true |
    {
        REST;
    }