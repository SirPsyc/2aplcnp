goals:
wants(pc(1, 'Antec Cases SONATA Mid Tower Case', 'Intel Desktop Board D865PERL', 'Intel Pentium 4', 'ATI RADEON 7000 Graphics card')).
wants(pc(1, 'Antec Performance II SX630II', 'Intel Desktop Board D865GLC', 'Compaq Pentium III', 'Sigma Design REALmagic Xcard')).
wants(pc(1, 'Non Existant PC', 'Intel Desktop Board D865GLC', 'Compaq Pentium III', 'Sigma Design REALmagic Xcard')).

beliefs:
  id(0).
  numberOfContractors(3).

beliefupdates:
{ id(X) }   Increment()    { not id(X), id(X+1)}
{ bids(Id, LIST), bidsReceived(Id, X) }    AddBid(Id, Cont, Price) {bids(Id, [bid(Cont, Price)|LIST]), not bids(Id,LIST), not bidsReceived(Id, X), bidsReceived(Id, X+1)}
  
pcrules:
    message( AGENT , inform, La, On, bid(ID, PRICE)) <- true |
    {   
        /* add bid to list of bids and count amount of bids */
        AddBid(ID, AGENT, PRICE);
    }
    message( AGENT, inform, La, On, done(ID, SUCCESS, PC)) <- true |
    {
        if(SUCCESS = 1)
        {
            /* succesfully bought a pc */
            dropgoal(wants(PC));
        }
        else
        {
            /* no deal, try again*/
            -contractSent(ID);
            -acceptSent(ID);
        }
    }
    agree(ID, PC) <- true |
    {
        /* find lowest bid and send message to contractors */
        B(bids(ID, LIST));
        getLowestBid(ID, LIST);
        if (B(lowestBid(ID, bid(LCN, LPR))))
        {
            if(LCN = 'contractor1')
            {
                send(contractor1, inform, winner(ID, 1, PC));
                send(contractor2, inform, winner(ID, 0, PC));
                send(contractor3, inform, winner(ID, 0, PC));
            }
            if(LCN = 'contractor2')
            {
                send(contractor1, inform, winner(ID, 0, PC));
                send(contractor2, inform, winner(ID, 1, PC));
                send(contractor3, inform, winner(ID, 0, PC));
            }
            if(LCN = 'contractor3')
            {
                send(contractor1, inform, winner(ID, 0, PC));
                send(contractor2, inform, winner(ID, 0, PC));
                send(contractor3, inform, winner(ID, 1, PC));
            }
        }
        else 
        {
            dropgoal(wants(PC));
        }
    }
    getLowestBid(ID, [bid(C,P)|LIST]) <- true |
    {
        /* find lowest bid */
        if(P >= 0)
        {
            if (lowestBid(ID, bid(LCN, LPR)))
            {
                if(LPR > P)
                {
                    -lowestBid(ID,bid(LCN,LPR));
                    +lowestBid(ID,bid(C, P));
                }
            }
            else
            {
                +lowestBid(ID, bid(C, P));
            }
        }
        if(not LIST = [])
            getLowestBid(ID, LIST);
    }
    
    
pgrules:
    wants(PC) <- not contractSent(X, PC) |
    {
        /* if not yet sent a contract, send one */
        if B(id(X)) then
        {
            Increment();
            +bidsReceived(X, 0);
            +bids(X,[]);
            send(contractor1, inform, wanted(X, PC));
            send(contractor2, inform, wanted(X, PC));
            send(contractor3, inform, wanted(X, PC));
            +contractSent(X, PC);
        }
    }
    wants(PC) <- contractSent(X, PC) and bidsReceived(X, N) and numberOfContractors(N) and not acceptSent(X)|
    {
        /* if received all offers and not sent an agreement, agree with one (or none) */
        +acceptSent(X);
        agree(X, PC);
    }
    
prrules:
    AddBid(_,_,_); REST; <- true |
    {
        REST;
    }